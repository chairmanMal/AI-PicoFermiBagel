const fs = require('fs');
const path = require('path');

async function testGameProgress() {
  console.log('üß™ Testing Game Progress & Subscriptions...\n');
  
  try {
    const multiplayerPath = path.join(__dirname, 'src/services/multiplayerService.ts');
    const multiplayerContent = fs.readFileSync(multiplayerPath, 'utf8');
    
    // Test game pulse method
    if (multiplayerContent.includes('async sendGamePulse')) {
      console.log('‚úÖ sendGamePulse method found');
    } else {
      console.log('‚ùå sendGamePulse method missing');
    }
    
    // Test game updates subscription
    if (multiplayerContent.includes('subscribeGameUpdates')) {
      console.log('‚úÖ subscribeGameUpdates method found');
    } else {
      console.log('‚ùå subscribeGameUpdates method missing');
    }
    
    // Test game start subscription
    if (multiplayerContent.includes('subscribeGameStart')) {
      console.log('‚úÖ subscribeGameStart method found');
    } else {
      console.log('‚ùå subscribeGameStart method missing');
    }
    
    // Test game end subscription
    if (multiplayerContent.includes('onGameEnd')) {
      console.log('‚úÖ onGameEnd subscription found');
    } else {
      console.log('‚ùå onGameEnd subscription missing');
    }
    
    // Check for proper interfaces
    if (multiplayerContent.includes('interface GamePulseResult')) {
      console.log('‚úÖ GamePulseResult interface found');
    } else {
      console.log('‚ùå GamePulseResult interface missing');
    }
    
    if (multiplayerContent.includes('interface GameUpdate')) {
      console.log('‚úÖ GameUpdate interface found');
    } else {
      console.log('‚ùå GameUpdate interface missing');
    }
    
    if (multiplayerContent.includes('interface GameStartEvent')) {
      console.log('‚úÖ GameStartEvent interface found');
    } else {
      console.log('‚ùå GameStartEvent interface missing');
    }
    
    if (multiplayerContent.includes('interface PlayerProgress')) {
      console.log('‚úÖ PlayerProgress interface found');
    } else {
      console.log('‚ùå PlayerProgress interface missing');
    }
    
    // Check for subscription management
    if (multiplayerContent.includes('subscriptions.set')) {
      console.log('‚úÖ Subscription management found');
    } else {
      console.log('‚ùå Subscription management missing');
    }
    
    // Check for cleanup methods
    if (multiplayerContent.includes('cleanup()')) {
      console.log('‚úÖ Cleanup method found');
    } else {
      console.log('‚ùå Cleanup method missing');
    }
    
    // Check for error handling in game methods
    const gameErrorHandling = multiplayerContent.match(/sendGamePulse.*catch|subscribeGameUpdates.*catch/g);
    if (gameErrorHandling && gameErrorHandling.length >= 2) {
      console.log('‚úÖ Error handling found in game methods');
    } else {
      console.log('‚ùå Error handling missing in game methods');
    }
    
    // Check for GraphQL subscriptions
    const subscriptionsPath = path.join(__dirname, 'src/graphql/subscriptions.ts');
    const subscriptionsContent = fs.readFileSync(subscriptionsPath, 'utf8');
    
    if (subscriptionsContent.includes('onGameUpdate')) {
      console.log('‚úÖ onGameUpdate subscription found');
    } else {
      console.log('‚ùå onGameUpdate subscription missing');
    }
    
    if (subscriptionsContent.includes('onGameStart')) {
      console.log('‚úÖ onGameStart subscription found');
    } else {
      console.log('‚ùå onGameStart subscription missing');
    }
    
    if (subscriptionsContent.includes('onGameEnd')) {
      console.log('‚úÖ onGameEnd subscription found');
    } else {
      console.log('‚ùå onGameEnd subscription missing');
    }
    
    console.log('\nüéØ Game progress test completed');
    
  } catch (error) {
    console.error('‚ùå Error testing game progress:', error);
  }
}

testGameProgress(); 